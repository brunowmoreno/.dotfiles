" Remove Bundles
UnBundle "Lokaltog/powerline"
UnBundle "terryma/vim-multiple-cursors"
"""""""
UnBundle 'easymotion/vim-easymotion'
UnBundle 'tpope/vim-abolish.git'
UnBundle 'osyo-manga/vim-over'
UnBundle 'kana/vim-textobj-user'
UnBundle 'kana/vim-textobj-indent'
UnBundle 'gcmt/wildfire.vim'
UnBundle 'mattn/webapi-vim'
UnBundle 'mattn/gist-vim'
UnBundle 'groenewege/vim-less'
UnBundle 'briancollins/vim-jst'
UnBundle 'kchmck/vim-coffee-script'
UnBundle 'tpope/vim-haml'
UnBundle 'rust-lang/rust.vim'
UnBundle 'tpope/vim-cucumber'
UnBundle 'cespare/vim-toml'
UnBundle 'quentindecock/vim-cucumber-align-pipes'
UnBundle 'saltstack/salt-vim'

" GVIM- (here instead of .gvimrc)
if has('gui_running')
    " auto save
    :au FocusLost * silent! wa
    :set autowriteall

    set guifont=Hack\ 11,Inconsolata\ for\ Powerline\ 11,Menlo\ Regular\ 11,Consolas\ Regular\ 11,Courier\ New\ Regular\ 11

    if has("gui_gtk2")
        " Set GUI Font
        set guifont=Hack\ 11,Inconsolata\ for\ Powerline\ 11,Menlo\ Regular\ 11,Consolas\ Regular\ 11,Courier\ New\ Regular\ 11
    elseif has('gui_macvim')
        " Set GUI Font
        set guifont=Droid\ Sans\ Mono\ for\ Powerline:h11,Menlo\ Regular:h11,Consolas\ Regular:h11,Courier\ New\ Regular:h11
        " Make the window slightly transparent
        set transparency=0
    elseif has('gui_vimr')
        " Set GUI Font
        set guifont=Droid\ Sans\ Mono\ for\ Powerline:h11,Menlo\ Regular:h11,Consolas\ Regular:h11,Courier\ New\ Regular:h11
    endif
else
    " Automatically load file changes
    source ~/.vim/bundle/vim-watchforchanges/plugin/watchforchanges.vim
    let autoreadargs={'autoread':1}
    execute WatchForChanges("*", autoreadargs)

    " hack for highlight color in gnome-terminal
    if !has("macunix")
        let g:solarized_termcolors=16
        color solarized
    endif
endif

" map oo to add new line
nnoremap <C-o> o<Esc>

" My Numbers settings
let g:enable_numbers = 0
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

" maps \c to ^__ for commenting
map <leader>c <C-_><C-_>

" maps space to prompt
map <space> :

" map double space to command-line prompt
map <space><space> :!

" map F7 to reindent lines
map <F7> mzgg=G`z<CR>

" map leader p to color picker
map <leader>p :PickHEX<CR>

" Set word wrap
map <leader>r :set wrap linebreak nolist<CR>
map <leader><leader>r :set nowrap<CR>

" GitGutter issue
let g:gitgutter_realtime = 0

" Always show statusline
set laststatus=2

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#branch#symbol = ' '
let g:airline#extensions#readonly#symbol = ''
let g:airline_linecolumn_prefix = ' '

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Neocomplete Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Neosnippet Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" <tab> mapping
imap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
  \ emmet#isExpandable() ? emmet#expandAbbrIntelligent("\<tab>") :
  \ pumvisible() ? "\<C-n>" :
  \ "\<TAB>"
smap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
  \ emmet#isExpandable() ? emmet#expandAbbrIntelligent("\<tab>") :
  \ "\<TAB>"

" large screen
let NERDTreeQuitOnOpen = 0
" small screen
"let NERDTreeQuitOnOpen = 1

" stop visual paste from replacing register
vnoremap p "_dP

" ctrlp ignore settings
" unlet the original spf13-vim settings
unlet g:ctrlp_custom_ignore
"unlet g:ctrlp_user_command
" set my own custom ignore settings
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|test$\|coverage$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" allow mouse reporting on large terminal sessions
" https://iterm2.com/faq.html
if has('mouse_sgr')
    set ttymouse=sgr
endif

" fixing double escape issue:
" https://github.com/Shougo/neocomplcache.vim/issues/350#issuecomment-105707520
"iunmap <Esc>

" map for markdown preview
let vim_markdown_preview_hotkey='<Leader>m'

" set column at 80 char
set colorcolumn=80

" set scss to 2 spaces
autocmd Filetype scss setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" eslint
let g:syntastic_javascript_eslint_exe = '/usr/bin/eslint'
let g:syntastic_javascript_checkers = ['eslint']

let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_access_descriptions = 1
let g:jsdoc_underscore_private = 1
