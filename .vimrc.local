" Remove Bundles
UnBundle "Lokaltog/powerline"
UnBundle "terryma/vim-multiple-cursors"

" GVIM- (here instead of .gvimrc)
if has('gui_running')
    " auto save
    :au FocusLost * silent! wa
    :set autowriteall

    if has("gui_gtk2")
        " Set GUI Font
        set guifont=Inconsolata\ for\ Powerline\ 9,Menlo\ Regular\ 9,Consolas\ Regular\ 9,Courier\ New\ Regular\ 9
    elseif has('gui_macvim')
        " Set GUI Font
        set guifont=Droid\ Sans\ Mono\ for\ Powerline:h11,Menlo\ Regular:h11,Consolas\ Regular:h11,Courier\ New\ Regular:h11
        " Make the window slightly transparent
        set transparency=0
    elseif has('gui_vimr')
        " Set GUI Font
        set guifont=Droid\ Sans\ Mono\ for\ Powerline:h11,Menlo\ Regular:h11,Consolas\ Regular:h11,Courier\ New\ Regular:h11
    endif
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    " Automatically load file changes
    source ~/.vim/bundle/vim-watchforchanges/plugin/watchforchanges.vim
    let autoreadargs={'autoread':1}
    execute WatchForChanges("*", autoreadargs)
endif

" remap escape key
inoremap ii <Esc>

" map oo to add new line
nnoremap <C-o> o<Esc>

" My Numbers settings
let g:enable_numbers = 0
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

"Markdown to HTML
nmap <leader>md :%!/usr/local/Cellar/markdown/1.0.1/bin/markdown --html4tags<CR>
" maps \c to ^__ for commenting
map <leader>c <C-_><C-_>
" maps space to prompt
map <space> :
" map double space to command-line prompt
map <space><space> :!
" map F7 to reindent lines
map <F7> mzgg=G`z<CR>
" map leader p to color picker
map <leader>p :PickHEX<CR>
" Moving lines
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Set word wrap
map <leader>r :set wrap linebreak nolist<CR>
map <leader><leader>r :set nowrap<CR>

" GitGutter issue
let g:gitgutter_realtime = 0

" Always show statusline
set laststatus=2

" Airline settings
let g:airline_powerline_fonts=1

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#branch#symbol = ' '
let g:airline#extensions#readonly#symbol = ''
let g:airline_linecolumn_prefix = ' '

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Neocomplete Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Neosnippet Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" <tab> mapping
imap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
  \ emmet#isExpandable() ? emmet#expandAbbrIntelligent("\<tab>") :
  \ pumvisible() ? "\<C-n>" :
  \ "\<TAB>"
smap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
  \ emmet#isExpandable() ? emmet#expandAbbrIntelligent("\<tab>") :
  \ "\<TAB>"

" Multiple Cursors - Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Multiple Cursors - Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction

let NERDTreeQuitOnOpen = 0

" geeknote
noremap <F8> :Geeknote<cr>
let g:GeeknoteFormat="markdown"

" stop visual paste from replacing register
vnoremap p "_dP

" ctrlp ignore settings
" unlet the original spf13-vim settings
unlet g:ctrlp_custom_ignore
unlet g:ctrlp_user_command
" set my own custom ignore settings
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|test$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
