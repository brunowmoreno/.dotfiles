" Remove Bundles
UnBundle "Lokaltog/powerline"
UnBundle "terryma/vim-multiple-cursors"
"""""""
UnBundle 'easymotion/vim-easymotion'
UnBundle 'tpope/vim-abolish.git'
UnBundle 'osyo-manga/vim-over'
UnBundle 'kana/vim-textobj-user'
UnBundle 'kana/vim-textobj-indent'
UnBundle 'gcmt/wildfire.vim'
UnBundle 'mattn/webapi-vim'
UnBundle 'mattn/gist-vim'
UnBundle 'groenewege/vim-less'
UnBundle 'briancollins/vim-jst'
UnBundle 'kchmck/vim-coffee-script'
UnBundle 'tpope/vim-haml'
UnBundle 'rust-lang/rust.vim'
UnBundle 'tpope/vim-cucumber'
UnBundle 'cespare/vim-toml'
UnBundle 'quentindecock/vim-cucumber-align-pipes'
UnBundle 'saltstack/salt-vim'

" search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab-complete
set wildmenu

" GVIM- (here instead of .gvimrc)
if has('gui_running')
    " auto save
    :au FocusLost * silent! wa
    :set autowriteall

    set guifont=Hack\ 11

    let s:uname = system("uname")
    if s:uname == "Darwin\n"
        " Set GUI Font
        set guifont=Hack:h14
        " Make the window slightly transparent
        set transparency=0
    endif

    if has("gui_gtk2")
        " Set GUI Font
        set guifont=Hack\ 14
    endif
else
    " Automatically load file changes
    source ~/.vim/bundle/vim-watchforchanges/plugin/watchforchanges.vim
    let autoreadargs={'autoread':1}
    execute WatchForChanges("*", autoreadargs)

    " hack for highlight color in gnome-terminal
    if !has("macunix")
        let g:solarized_termcolors=16
        color solarized
    else
        set background=dark
        " solarized options 
        let g:solarized_termcolors=16
        let g:solarized_visibility = "high"
        let g:solarized_contrast = "high"
        colorscheme solarized
    endif

    " for mac clipboard
    set clipboard=unnamed
endif

" map oo to add new line
nnoremap <C-o> o<Esc>

" My Numbers settings
let g:enable_numbers = 0
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

" maps \c to ^__ for commenting
map <leader>c <C-_><C-_>

" maps space to prompt
map <space> :

" map double space to command-line prompt
map <space><space> :!

" map F7 to reindent lines
map <F7> mzgg=G`z<CR>

" map leader p to color picker
map <leader>p :PickHEX<CR>

" Set word wrap
map <leader>r :set wrap linebreak nolist<CR>
map <leader><leader>r :set nowrap<CR>

" GitGutter issue
let g:gitgutter_realtime = 0

" Always show statusline
set laststatus=2

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#branch#symbol = ' '
let g:airline#extensions#readonly#symbol = ''
let g:airline_linecolumn_prefix = ' '

" airline tabline - Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" airline - Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 0

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Neocomplete Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Neosnippet Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" <tab> mapping
imap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
  \ emmet#isExpandable() ? emmet#expandAbbrIntelligent("\<tab>") :
  \ pumvisible() ? "\<C-n>" :
  \ "\<TAB>"
smap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" :
  \ emmet#isExpandable() ? emmet#expandAbbrIntelligent("\<tab>") :
  \ "\<TAB>"

" large screen
let NERDTreeQuitOnOpen = 0
" small screen
"let NERDTreeQuitOnOpen = 1

" paste with indent and
" stop visual paste from replacing register
nnoremap p p=`]
nnoremap P P=`]
vnoremap p "_dp=`]
vnoremap P "_dP=`]
" paste normal
nnoremap <leader><leader>p p
nnoremap <leader><leader>P P

" ctrlp ignore settings
" unlet the original spf13-vim settings
unlet g:ctrlp_custom_ignore
"unlet g:ctrlp_user_command
" set my own custom ignore settings
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|test$\|coverage$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" allow mouse reporting on large terminal sessions
" https://iterm2.com/faq.html
if has('mouse_sgr')
    set ttymouse=sgr
endif

" fixing double escape issue:
" https://github.com/Shougo/neocomplcache.vim/issues/350#issuecomment-105707520
"iunmap <Esc>

" map for markdown preview
let vim_markdown_preview_hotkey='<Leader>m'

" set column at 80 char
set colorcolumn=80

" set scss to 2 spaces
autocmd Filetype scss setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

" filetype plugin
filetype plugin indent on

" eslint
let g:syntastic_javascript_eslint_exe = '/usr/bin/eslint'
let g:syntastic_javascript_checkers = ['eslint']

let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_access_descriptions = 1
let g:jsdoc_underscore_private = 1

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" nocompatible setting
set nocompatible

" javacomplete
" required
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" javacomplete
" To enable smart (trying to guess import option) inserting class imports with F4
nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
imap <F4> <Plug>(JavaComplete-Imports-AddSmart)

" javacomplete
" To enable usual (will ask for import option) inserting class imports with F5
nmap <F5> <Plug>(JavaComplete-Imports-Add)
imap <F5> <Plug>(JavaComplete-Imports-Add)

" javacomplete
" To add all missing imports with F6
nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
imap <F6> <Plug>(JavaComplete-Imports-AddMissing)

" javacomplete
" To remove all unused imports with F7:
nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
